# -*- coding: utf-8 -*-
"""Foot_stat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15KxtW0g110Lm6aoOA0ZbjJgQfpJl_Cp5
"""

from bs4 import BeautifulSoup
import pandas as pd
import requests

from google.colab import files

def PageLink(link):
	"""
	Эта функция получает все ссылки на команды одной лиги.

	"""

	response = requests.get(link)
	soup = BeautifulSoup(response.content, 'html.parser')

	html = soup.findAll('a', class_='float-left')

	#Получаем полные готовые ссылки 
	links = [link.attrs['href'] for link in html]
	new_links = [link.replace('..', '') for link in links]
	full_links = ['https://www.bdfutbol.com/en' + link for link in new_links]

	return full_links

def getStatistic(link_page):
	"""
	Эта функция парсит всю статистику по игрокам, и приводит ее к обьекту DataFrame

	"""

	response = requests.get(link_page)

	soup = BeautifulSoup(response.content, 'html.parser')
 
	#Находим все нужные нам элементы страницы со статистикой
	params = soup.findAll('td', class_='fit')
	names = soup.findAll('span', class_='font-weight-bold mr-2 float-left')
	league = soup.find('div', class_='chip fons-gris float-right mr-2')
	team = soup.find('span', attrs={'class': 'superh1'})
	for i in soup.findAll('div', {'id':'alineacio'} ):
		names = i.findAll('span', attrs={'class', 'font-weight-bold mr-2 float-left'})
	
	elem = []
	for i in soup.findAll('div', class_='fit'):
		elem += i.attrs['class']

	#Преобразуем html-элементы к понятному текстовому виду
	team = team.text.split()
	team.remove(team[-1])
	text_team = ' '.join(team)
	text_league = league.text
	text_params = [text.text for text in params]
	text_params = [x for x in text_params if x]
	text_names = [text.text for text in names]
	elem = [x for x in elem if x != 'fit']

	new_elem = []
	for item in elem:
		if item == 'por':
			new_elem.append('Вратарь')
		if item == 'ltd':
			new_elem.append('Правый защитник')
		if item == 'lti':
			new_elem.append('Левый защитник')
		if item == 'cen':
			new_elem.append('Центральный защитник')
		if item == 'mig':
			new_elem.append('Полузащитник')
		if item == 'dav':
			new_elem.append('Нападающий')
		if item == 'def':
			new_elem.append('Центральный защитник')
		if item == 'dac':
			new_elem.append('Центральный нападающий')
		

	#Получаем массивы со значениями из каждого параметра
	player_numbers = text_params[0::11]
	age = text_params[1::11]
	played_matches = text_params[2::11]
	lineup_matches = text_params[3::11]
	complete_matches = text_params[4::11]
	substitute_matches = text_params[5::11]
	called_up_wp = text_params[6::11]
	minutes = text_params[7::11]
	yellow_cards = text_params[8::11]
	red_cards = text_params[9::11]
	goals = text_params[10::11]


	#Получаем готовый словарь со всей статистикой по игрокам
	data_row = {
		'Лига': text_league,
		'Клуб': text_team,
		'Имя': text_names,
		'Номер игрока': player_numbers,
		'Возраст': age,
		'Позиция': new_elem,
		'Сыгранные матчи': played_matches,
		'Играл в основном составе': lineup_matches,
		'Завершенные матчи': complete_matches,
		'Начинал со скамейки': substitute_matches,
		'Провел игру на скамейке': called_up_wp,
		'Кол-во минут': minutes,
		'Желтые карточки': yellow_cards,
		'Красные карточки': red_cards,
		'Голы': goals
	}

	
	return pd.DataFrame(data_row, columns=['Лига', 'Клуб', 'Имя', 'Номер игрока', 'Возраст', 'Позиция', 'Сыгранные матчи','Играл в основном составе','Завершенные матчи',
								'Начинал со скамейки','Провел игру на скамейке','Кол-во минут','Желтые карточки','Красные карточки','Голы'])

def getParser(league, links):
  """
  Эта функция получает обьект DataFrame и массив ссылок футбольных команд, 
  и возвращает таблицу со всей статистикой каждого игрока определенной лиги

  """

  for i in links:
    try:
      league = league.append(getStatistic(i), ignore_index=True)
    except ValueError:
      pass
    
  return league

#Собираем статистику по игрокам из Премьер-лиги

links = PageLink('https://www.bdfutbol.com/en/t/teng2019-20.html')

links

epl = pd.DataFrame()

epl = getParser(epl, links)

#Собираем статистику по игрокам из Бундеслиги

bundesliga = pd.DataFrame()

bundes_links = PageLink('https://www.bdfutbol.com/en/t/tger2019-20.html')

bundesliga = getParser(bundesliga, bundes_links)

#Собираем статистику по игрокам из Ла-лиги

la_liga = pd.DataFrame()

la_liga_links = PageLink('https://www.bdfutbol.com/en/t/t2019-20.html')

la_liga = getParser(la_liga, la_liga_links)

#Собираем статистику по игрокам из Серии А

seria_a = pd.DataFrame()

seria_a_links = PageLink('https://www.bdfutbol.com/en/t/tita2019-20.html')

seria_a = getParser(seria_a, seria_a_links)

#Собираем статистику по игрокам из Лиги 1

ligue_1 = pd.DataFrame()

ligue_1_links = PageLink('https://www.bdfutbol.com/en/t/tfra2019-20.html')

ligue_1 = getParser(ligue_1, ligue_1_links)

#Получаем всю вместе собранную информацию по всем футболистам

all_leagues = pd.DataFrame()

leagues_arr = [epl, bundesliga, la_liga, ligue_1, seria_a]

for i in leagues_arr:
  all_leagues = all_leagues.append(i, ignore_index=True)

all_leagues

#Сохраняем csv файл 

all_leagues.to_csv('all_foot_stat.csv', encoding='utf-8')

files.download('all_foot_stat.csv')

